#SHA-2,3算法的安全性论证#
1. 论证要点
* 这个算法很新，尚未经过时间考验;
* 该算法在海选过程中受到过哪些理论攻击;
* 有哪些著名机构用了该算法，
* 该算法的理论基础
* 该算法与MD5等的差别
1.  #概括结论#
* [MD5](http://baike.baidu.com/view/7636.htm)已经**不适合**继续用在密码安全产品中
* [SHA-1](http://baike.baidu.com/view/94209.htm)在未来多年内仍然是**现实安全**的，各种破解手段仍然无法产生***现实的威胁***,但是***新开发***产品除非为了*硬件加速，或者兼容性*等缘故，最好不要再用
* [SHA-2](http://baike.baidu.com/view/553173.htm)在未来十年以至于更久，仍然在理论上也是安全的，每年在全球各大银行之间划拨***几万亿美元***资金的SWIFT网络转向该算法就是最大的保证；但其理论基础与MD5,SHA-1是一脉相承的，将来十年左右可能会发现新的理论攻击方法威胁到它；
	**NIST也在转向SHA-2**，下文详细谈到，而NIST的密码算法标准就是全球所有包括金融等等在内的用到密码算法的最重要的民用行业的标准(各国军方，政府各有自己的一套)

1. ##MD5,SHA-1系列算法的现状##
	2. 各种算法理论攻击现状
	    3. MD5:
* 已被[王小云](http://baike.baidu.com/subview/350813/7544439.htm)从*理论上攻破*，网上已有现成碰撞例子程序可以在几个小时以内找到碰撞，但对于人类可读文本进行数字签名的应用场景，该攻击*只有理论意义*，因为找到的碰撞是**无意义二进制数据**；
* 但是用来构造EXE，ISO等二进制文件的碰撞已经可用，有现实威胁；
 > MD5一度被广泛应用于计算机安全领域。但由于近年来MD5的弱点不断被发现，以及当今计算机运算能力的不断提升，现在已经可能人为构造出两个具有相同MD5校验值的信息[2]，使本算法不再适合现今的安全领域。目前，MD5算法因其普遍、稳定、快速的特点，仍广泛应用于*普通数据的错误检查*领域。例如在一些BitTorrent 下载中，软件将通过计算MD5检验下载到的文件片段的完整性。
> 
MD5算法较老，散列长度固定为128比特 ，随着计算机运算能力提高，更快地找到“碰撞”是有可能的。因此，在安全要求高的场合不应再使用MD5。
> 
2004年，王小云 证明MD5数字签名算法可能被快速生成“碰撞”[3]。2007年，Marc Stevens，Arjen K. Lenstra和Benne de Weger进一步指出通过伪造软件签名，可重复性攻击MD5算法[4]。研究者使用前缀碰撞法（chosen-prefix collision），使程序前端包含恶意程序，利用后面的空间添上垃圾代码凑出同样的MD5散列值。
> 
2007年，荷兰埃因霍芬技术大学科学家成功把2个可执行文件进行了MD5碰撞，使得这两个运行结果不同的程序会被计算出同一个MD5值[5]。2008年12月一组科研人员通过MD5碰撞成功生成了伪造的SSL 证书，这使得在https协议中服务器可以伪造一些根CA 的签名。[6]
	3. SHA-0:
* 160bit,生日攻击需要2-80次方(以后直接以2-80写法指代2的80次方，其余类似),经过从98年到05年的理论攻击，最终由王小云的团队找到了2-39代价的理论攻击方法，等于已经被攻破；
> 
SHA-0 的破解: 在CRYPTO 98上，两位法国研究者提出一种对SHA-0的攻击方式[3]：在261的计算复杂度之内，就可以发现一次碰撞（即两个不同的信息对应到相同的信息摘要）；这个数字小于生日攻击法 所需的2-80，也就是说，存在一种算法，使其安全性不到一个理想的散列函数抵抗攻击所应具备的计算复杂度。
> 
2004年 时，Biham 和Chen也发现了SHA-0的近似碰撞，也就是两个信息可以散列出几乎相同的数值；其中162比特中有142比特相同。他们也发现了SHA-0的完整碰撞（相对于近似碰撞），将本来需要80次方的复杂度降低到62次方。
>
2004年 8月12日 ，Joux, Carribault, Lemuet和Jalby宣布找到SHA-0算法的完整碰撞的方法，这是归纳Chabaud和Joux的攻击所完成的结果。发现一个完整碰撞只需要2-51的计算复杂度。他们使用的是一台有256颗Itanium2处理器的超级电脑 ，约耗80,000 CPU工时。
>
2004年 8月17日 ，在CRYPTO 2004的Rump会议上，王小云 ，冯登国（Feng）、[来学嘉](http://baike.baidu.com/view/2288674.htm) （Lai），和于红波 （Yu）宣布了攻击MD5 、SHA-0和其他散列函数 的初步结果。他们攻击SHA-0的计算复杂度是**2-40**，这意谓的他们的攻击成果比Joux还有其他人所做的更好。请参见MD5安全性。2005年二月，王小云 和殷益群 、于红波 再度发表了对SHA-0破密的算法，可在***2-39***的计算复杂度内就找到碰撞。
***********************************************************************
	3. SHA-1:
* 160bit,生日攻击需要2-80,已被王小云团队在2005年从理论上攻破，计算代价***2-63***；
> 
 SHA-1 的破解:鉴于SHA-0的破密成果，专家们建议那些计划利用SHA-1实现密码系统的人们也应重新考虑。在2004年 CRYPTO 会议结果公布之后，[NIST](http://baike.baidu.com/view/2356127.htm)即宣布他们将逐渐减少使用SHA-1，改以SHA-2取而代之。
>
 2005年 ，Rijmen 和Oswald 发表了对SHA-1较弱版本（53次的加密循环而非80次）的攻击：在2-80的计算复杂度之内找到碰撞。
>
 2005年二月，王小云 、殷益群 及于红波 发表了对完整版SHA-1的攻击，只需少于2-69的计算复杂度，就能找到一组碰撞。（利用生日攻击法 找到碰撞需要2-80的计算复杂度。）
>
 这篇论文的作者们写道；“我们的破密分析是以对付SHA-0的差分攻击 、近似碰撞、多区块碰撞技术、以及从MD5 算法中查找碰撞的信息更改技术为基础。没有这些强力的分析工具，SHA-1就无法破解。”此外，作者还展示了一次对58次加密循环SHA-1的破密，在2-33个单位操作内就找到一组碰撞。完整攻击方法的论文发表在2005年八月的CRYPTO 会议中。
殷益群在一次面谈中如此陈述：“大致上来说，我们找到了两个弱点：其一是前置处理不够复杂；其二是前20个循环中的某些数学运算会造成不可预期的安全性问题。”
>
 2005年8月17日 的CRYPTO 会议尾声中王小云 、姚期智 、姚储枫 再度发表更有效率的SHA-1攻击法，能在***2-63***个计算复杂度内找到碰撞。
>
 2006年 的CRYPTO 会议上，Christian Rechberger 和Christophe De Cannière 宣布他们能在容许攻击者决定部分原信息的条件之下，找到SHA-1的一个碰撞。
在密码学的学术理论中，任何攻击方式，其计算复杂度若少于暴力搜索法所需要的计算复杂度，就能被视为针对该密码系统的一种破密法；但这并不表示该破密法已经可以进入实际应用的阶段。
	2.  理论破解的意义
> 就应用层面的考量而言，*一种新的破密法出现，暗示着将来可能会出现更有效率、足以实用的改良版本*。虽然这些实用的破密法版本根本还没诞生，但确有必要发展更强的散列算法来取代旧的算法。在“碰撞”攻击法之外，另有一种反译攻击法（Pre-image attack），就是由散列出的字符串反推原本的信息；反译攻击的严重性更在碰撞攻击之上，但也更困难。在许多会应用到密码散列的情境（如用户密码的存放、文件的数字签章 等）中，碰撞攻击的影响并不是很大。举例来说，一个攻击者可能不会只想要伪造一份一模一样的文件，而会想改造原来的文件，再附上合法的签章，来愚弄持有私密密钥的验证者。另一方面，如果可以从密文中反推未加密前的用户密码，攻击者就能利用得到的密码登录其他用户的账户，而这种事在密码系统中是不能被允许的。但若存在反译攻击，只要能得到指定用户密码散列过后的字符串（通常存在影文件中，而且可能不会透露原密码信息），就有可能得到该用户的密码。
	2. SHA-2:  
* 尚无明显弱点，尚无直接威胁，但不像虽然已被理论破解但也已经久经考验的MD5和SHA-1那样被大家广泛信任；目前对于完全轮数的SHA-2，**最佳的攻击手段效率比暴力攻击之提高了3bit不到**；
* NIST发布了三个额外的SHA变体，这三个函数都将信息对应到更长的信息摘要。以它们的摘要长度（以比特计算）加在原名后面来命名：SHA-256，SHA-384和SHA-512。它们发布于2001年 的FIPS PUB 180-2草稿中，随即通过审查和评论。包含SHA-1的FIPS PUB 180-2，于2002年 以官方标准发布。2004年 2月，发布了一次FIPS PUB 180-2的变更通知，加入了一个额外的变种SHA-224"，这是为了符合双密钥3DES 所需的密钥长度而定义。
* SHA-256和SHA-512是很新的散列函数，前者以定义一个word为32位，后者则定义一个word为64位。它们分别使用了不同的偏移量，或用不同的常数，然而，实际上二者结构是相同的，只在循环运行的次数上有所差异。SHA-224以及SHA-384则是前述二种散列函数的截短版，利用不同的初始值做计算。
* 这些新的散列函数并没有接受像SHA-1一样的公众密码社区做详细的检验，所以它们的密码安全性还不被大家广泛的信任。Gilbert和Handschuh在2003年 曾对这些新变种作过一些研究，声称他们没有找到弱点。
	3. SHA-3:  
* SHA-3并不是要取代SHA-2，因为SHA-2目前并没有出现明显的弱点。由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，NIST感觉需要一个与之前算法不同的，可替换的加密杂凑算法，也就是现在的SHA-3。

1. ##理论攻击意义##
* *在密码学的学术理论中，任何攻击方式，其计算复杂度若少于暴力搜索法所需要的计算复杂度，就能被视为针对该密码系统的一种破密法；但这并不表示该破密法已经可以进入实际应用的阶段。*  
* 就应用层面的考量而言，一种新的破密法出现，暗示着将来可能会出现更有效率、足以实用的改良版本。虽然这些实用的破密法版本根本还没诞生，但确有必要发展更强的散列算法来取代旧的算法。

1. ##SHA-3标准化进程##
	2. 目前公布的SHA-3标准化进程时间表：  
[SHA-3标准化时间表](http://csrc.nist.gov/groups/ST/hash/sha-3/timeline_fips.html)  
2007年11月：NIST发起SHA-3算法竞赛，寻求补充SHA-1和SHA-2的新的HASH算法；  
2008年10月：64个候选算法提交到NIST以供评审；  
2008年12月：51个SHA-3第一轮候选算法列表发布；  
2009年7月：14个候选算法进入第二轮；这些算法是：BLAKE, BLUE MIDNIGHT WISH, CubeHash, ECHO, Fugue, GrOstl(名字中的O是希腊字母Omega), Hamsi, JH, Keccak, Luffa, Shabal, SHAvite-3, SIMD, and Skein.  
2012年10月：正式选择Keccak算法作为最终选择的SHA-3算法；  
2013年第三季度：发布SHA-3的FIPS标准草案，征求公众意见，为期90天；  
2013年第四季度：该季度末，公众意见征求期结束；  
2014年第一季度：解决公众意见中提出的问题，准备SHA-3 FIPS最终稿；  
2014年第二季度：发布SHA-3 FIPS标准最终稿；  

1. ##SHA-2等算法在银行等重要行业的应用##
	2. [SWIFT](http://baike.baidu.com/view/61075.htm)介绍  
* SWIFT是环球银行金融电信协会的简称，总部设在比利时首都布鲁塞尔，是**全球最重要的金融通信网络之一**。银行和其他金融机构通过它相互交换电文，完成金融交易。接入该网络的金融机构超过8000家，遍及200多个国家和地区。  
* SWIFT自投入运行以来，以其高效、可靠、低廉和完善的服务，在促进世界贸易的发展，加速全球范围内的货币流通和国际金融结算，促进国际金融业务的现代化和规范化方面发挥了积极的作用。  
* SWIFT的设计能力是每天传输1100万条电文，而当前每日传送500万条电文，***这些电文划拨的资金以万亿美元计***，它依靠的便是其提供的240种以上电文标准。SWIFT的电文标准格式，已经成为国际银行间数据交换的标准语言。  
	2. SWIFT从SHA-1转向SHA-256:  
[SWIFT转向SHA-256](http://www-01.ibm.com/support/docview.wss?uid=swg21602417)  
***SWIFT正在将其全球金融交易生产网络的默认HASH算法从SHA-1转向SHA-256***。这将分为两步：  
首先，在2012年12月，SWIFT网络中心服务器的默认HASH算法切换到SHA-256，所有客户端软件(全球各大银行的银行间资金往来报文网关)必须能正确处理SHA-256产生的HASH结果，不能正确处理SHA-256的HASH结果的客户端将被拒绝使用SWIFT网络；  
第二步，SWIFT将要求所有客户端产生SHA-256的HASH结果作为默认设置；

1.  ##SHA-1的安全性尚未受到现实威胁  ##
[SHA-1目前仍安全](http://www.cfca.com.cn/zhishi/wz-002.htm)  
* 2004年8月17日，在美国召开的国际密码学会议（Crypto’ 2004）上，一些国家的密码学者作了破译Hash函数的新进展的报告，其中我国山东大学的王小云教授做了破译MD5、HAVAL-128、MD4、和RIPE MD算法的报告。  
* 到2005年2月，据王小云教授的研究报告，他们已经研究出了搜索SHA-1碰撞的一系列新技术。他们的分析表明，SHA-1的碰撞能在小于2^69次Hash操作中找到。对完整的80轮SHA-1的攻击，这是第一次在小于2^80次Hash操作这个理论界限的情况下找到碰撞。根据他们的估计，对于缩减到70轮的SHA-1能够用现在的超级计算机找出“实碰撞”。他们的研究方法，能自然地运用到SHA-0和缩减轮数的SHA-1的破译分析上。
* 2005年3月6日，Arjen Lenstra，王小云，Benne de Weger 宣布，他们**构造出一对基于MD5 Hash函数的X.509证书，产生了相同的签名**。他们提出了一种构造X.509证书的方法，在他们所构造出的证书对中，由于使用了MD5算法，签名部分产生了碰撞。因此，当证书发布者使用MD5作为Hash函数时，发布者就会在证书中产生相同的签名，导致PKI的基础原理遭到可信性破坏。这意味着，从单独某个证书无法确定是否存在另一个不同证书有着相同的签名。由于第二个相同签名证书存在的可能性，证书发布机构无法验证私钥的“拥有证明”，即无法验证证书中的签名。因此，使用“基于MD5函数”公钥证书的任何一方都无法确保所谓的证书拥有者是否真实拥有相应的私钥。
* **他们也想构造一对基于SHA-1的X.509证书，产生相同的签名。然而，他们还做不到这一点**。因为产生SHA-1碰撞还需要相当长一段时间的研究。
* 专家指出：A.Lenstra和王小云等人声称已经成功地构造了两张符合X．509证书数据结构，拥有同样签名而内容却不同的证书，但**该构造方法对证书的部分域要有特殊安排，签名算法RSA的密钥也是按照特殊规律生成的，要用来攻击某个实际应用的电子签名系统仍需时日**。而***对于SHA-1算法，说其从理论上被破解都还为时过早***，只能说其破解工作取得了重大突破，破解所需要运算次数已从原来设计时估算的2^80次降低为2^69次，这比穷举法快了２０４８倍，但2^69次运算需要６０００年左右的时间，在实际计算上仍然是不可行的。
* 除了运算方面的瓶颈外，哈希函数的不可逆性决定了攻击者无法轻易得手，没有人可以保证通过这个发现的每个碰撞都是“可用”的碰撞。在漫长的运算后，你得到的也许包含一些有价值的信息，也许就是理论上存在的单纯碰撞，运算瓶颈和信息匮乏都会使黑客们的种种努力成为徒劳……据业内人士估计，在当前的技术条件下，２^50或２^ ６０次运算量的范围内的攻击方法才会为我们带来麻烦，即引发实际意义上的攻击行为。在新研究成果发布前的一段时间内，**SHA-1 算法只能被称作不完美，但还是安全的**。基于PKI技术进行电子签名的最终用户，目前还不用担心自己的签名被伪造或遭遇签名人抵赖。
* 另外，安全专家强调：一种算法被破译，和整个企业的安全系统被攻破，是两个不同的概念。因为随着攻击技术和能力的提高，算法也会“水涨船高”，向前发展进步。王教授所取得的成就提醒密码学家研究新的算法，提醒有关标准化机构要提前修改算法标准，也提醒有关CA和电子签名产品开发商支持新的算法。当然，有些完全基于摘要算法的密押系统和电子货币系统，还需要尽早考虑替换方案。
* *美国国家技术与标准局（NIST）曾经发表如下评论：“研究结果说明SHA-1的安全性暂时没有问题，但随着技术的发展，技术与标准局计划在2010年之前逐步淘汰SHA-1，换用其他更长更安全的算法（如：SHA-224, SHA-256, SHA-384和SHA-512）来代替。”*

1. ##SHA-1理论破解尚未能形成现实威胁##
* 目前，普通电脑，比如我办公用的奔腾双核G620的CPU，单个核心跑OPENSSL测试获得的SHA-1速度是255MB/S;               
* 假设输入是256字节大小的块，应该符合大部分银行数据包的情况；
* 按照256字节大小块计算，那就等同于每秒钟做1M次的HASH运算，1M=2^20；
* 如果数据块大小不同，比如64字节或者128字节，这个次数也不会有数量级的变化，可以忽略该差别；
* 目前SHA-1的理论破解最好的结果是2^63次运算,需要2^43秒=28万年；
* sandy bridge和ivy bridge每个周期执行的运算次数都是x8；我的G620单个核心理论运算速度2.8Gx8=22.4G flops/s，使用[Intel Optimized LINPACK Benchmark](http://software.intel.com/en-us/articles/intel-math-kernel-library-linpack-download)做了一个实际测试，实际性能在17-18GFlops/s左右，和预计的差不多；
* 浮点运算性能一般低于整数运算性能，但我们的这种估算数量级的场合无关紧要；
* 目前全球超级计算机Top 500第一名，中国的天河2号，采用了Intel Xeon Phi处理器，具有312万的运算核心，峰值性能33.86petaflop/s；
* 天河2号理论速度是我的办公电脑的 33.86P/22.4G=1.5M倍，也就是一百五十万倍；如果用来破解SHA-1，寻找碰撞的话，**大约需要2-3个月时间**；
1. ##百度百科的[王小云](http://baike.baidu.com/subview/350813/7544439.htm)词条误导性批驳##
> 破解MD5密码算法，运算量达到2的80次方。即使采用现在最快的巨型计算机，也要运算100万年以上才能破解。但王小云和她的研究小组用普通的个人电脑，几分钟内就可以找到有效结果。
* 首先，MD5不是“密码算法”，这个说法似是而非，当然对于普通人来说这么说也可以；
* 该句说的破解MD5的运算量达到2的80次方，是错误的，MD5的HASH长度是128位，进行生日攻击的暴力破解，运算量是2的64次方，以2013年最新的TOP 500超级计算机第一名，中国国防科技大学的“天河二号”的33PegaFlops/s的速度来说，大约需要3个月时间跑出一个MD5的生日攻击碰撞结果；
* 目前所有的理论破解，基本原理都是通过精心构造某些数据，可以少一些计算量，但仍然需要进行2的64次方数量级的HASH运算，只是比暴力攻击的生日攻击大幅度减小而已；
* 没有什么不用进行大量HASH运算就能找到HASH碰撞的理论破解方法，至少公开的没有；或许NSA(美国国家安全局,SHA-1算法的设计者)手里有；
* 2的64次方的MD5或者SHA-1等HASH算法运算量，哪怕借助于GPU等工具，也绝对是普通个人电脑无法承受的运算量；
* 目前找到MD5的碰撞，王小云做出的成果是2的39次方的运算量可以找到碰撞，普通个人电脑，办公商用机，大约需要一周左右时间的运算，高端12核心Intel Xeon服务器或许可以在大半天内找到碰撞；借助于高端AMD GPU，才有可能在几分钟内找到MD5的碰撞；这个性能的差别，文科出身的记者是弄不清的；当然，只需普通人就可以拥有的普通硬件，无论是一周还是几分钟，找到MD5碰撞，确实可以说是一种现实威胁了；
* 但目前对于MD5的这种威胁，包括其他密码学家成功做出来的基于MD5的伪造SSL证书，都还是**需要精心构造特定结构的数据，证书内部的各个字段都需要特殊的结构编排**，才可以符合证书的语义，同时又达到伪造的效果；换言之，**局限性极大，并无实用价值**；
* 说的更大白话一点，**普通人还无需担心使用MD5算法的银行系统因此而被攻破，导致自己的钱丢失**，或者是自己的一段比如“我同意贷款一百万元给微软公司”之类的基于MD5的数字签名被人伪造；因为尽管哪怕几分钟就可以找到一个MD5碰撞，但找到的碰撞“原文”全都是类似"@#$^#$%&^@%$&#$"之类的，或者更乱的，都无法表达为可打印ASCII码的无意义二进制数据，发送这么一段“原文”，尽管MD5值是一个和前面一段话相同的碰撞，但是**接收者是不会认可这段签名的**；银行等系统中的应用同理；
* 目前针对银行之类的犯罪，都是依靠的社会工程学手段而非技术手段；各大国政府和军方具有利用MD5的理论破解来做他们想做的事的能力，但他们没必要通过这个手段来对普通人下手，他们有的是其他更快更直接的手段比如行政手段；
* 从密码学理论角度来看，只有“一次一密”加密体制是理论上绝对安全的，也就是密钥长度和明文等长，并且密钥是随机的，而且永不重复；其他密码学算法都是理论上不安全的，但**只要破解花费远大于所能获得的利益，包括但不限于经济利益，那么这个密码体制就是成功的**；
> SHA-1密码算法，由美国专门制定密码算法的标准机构———美国国家标准与技术研究院与美国国家安全局设计，早在1994年就被推荐给美国政府和金融系统采用，是美国政府目前应用最广泛的密码算法。
* SHA-1,DES,3DES,AES等等，都是美国政府推荐给银行等等民用重要领域使用的标准算法，也用于美国政府自己的**“敏感但是非机密”**的信息的保护；也就是说真正机密的美国政府部门，都是使用一些NSA等机构专门设计，秘而不宣的专用密码算法的；
> 王小云是从1994年开始破解MD5和SHA-1的，到她2004年成功破解恰恰经过了10年。她说，从现在开始世界密码学界已经开始了新密码的设计工作，预计到2012年新一代安全密码将产生。
* 这个新一代的安全HASH算法就是2012年10月NIST最新选出的KECCAK，也就是SHA-3,算法已经确定，只是目前标准尚未最终定稿；
> 作为中国出席“Crypto′2004”和“RSA 2005”年会的唯一正式代表，翟起滨教授特别强调：“碰撞分为‘强无碰撞’和‘弱无碰撞’。**强无碰撞**是无法产生有实际意义的原文的，也就**无法篡改和伪造出有意义的明文**。”通过强无碰撞伪造一个谁也看不懂的东西，没有实际意义。翟教授还让记者浏览了“RSA 2005”年会的会议摘要，国际密码学专家沙米尔（Shamir）在“RSA 2005”年会上就**王小云教授找到一对强无碰撞**发表观点：“这是个重要的事情，但不意味着密码被破解。”
* 写这篇“百度百科”的“王小云”词条的记者毕竟是文科生，这篇里面没有提到MD5的破解代价是2的39次方，只说普通个人电脑可以几分钟内找到碰撞，倒也罢了，看起来似乎是“现实威胁”，但是文科生不理解王小云找到的是“强无碰撞”，也就是出来的碰撞结果是**无意义数据**，没有实际意义，当然在理论研究方面确实是一个重大成果；
> 假设映射空间，就是说最后能够得到的值的个数是m，那么弱碰撞的复杂度是O(m)，而强碰撞呢是O(sqrt(m))，所以说找到强碰撞更简单
* 这段话出自于[md5到md5 破解的一些科普](http://www.isnowfy.com/introduction-to-md5/),是对于王小云的论文的一个简明解说，换个说法，就是要做到伪造有意义的原文，那么所需的计算量，2的多少次方，那个指数需要翻倍。也就是说，理论上2的78次方的计算量可以伪造有意义的MD5原文，2的126次方的计算量可以伪造有意义的SHA-1原文，如果有人研究出了伪造有意义明文的“弱无碰撞”方法的话；  
而哪怕是2的78次方，也需要如今最强的超级计算机花费上万年的计算量；如果集成电路工艺能继续按照摩尔定律发展，大约还需要加快2的13次方速度，也就是13*18个月，大约20年时间，那时候世界最快的超级计算机才能在一年内伪造出有意义的MD5明文；至于SHA-1的情形，还需要集成电路工艺按照摩尔定律继续发展(126-65)*18个月，也就是90年左右，才能由那时候的世界最快超级计算机伪造出有意义的明文；这两件事情发生的前提是，密码学术界找出了“弱无碰撞”的理论方法，至今为止还没有找出来；
* 国际上，密码学标准和算法大致上是20左右年换一代，比如80年代初开始广泛运用的DES，到了90年代末，NIST就开始寻求换代算法，而90年代初开始运用的MD5，90年代中期开始运用的SHA-1，在2010年前后开始寻求下一代算法；所以到了20年后，如果理论上可以制造“弱无碰撞”，技术上也发展到了那一步，MD5早就被淘汰了，实际上MD5现在就已经被重要的密码应用场合淘汰了，只是各种系统中出于兼容性原因还继续保留该算法的支持，但是已经不推荐使用了；
* 写这篇“百度百科”的“王小云”词条的记者，毕竟是文科生，不理解2的39次方的MD5碰撞计算代价，与2的63次方的SHA-1碰撞计算代价之间**天差地远**，前者只需普通个人电脑，少则几分钟，多则几天，就可以计算完毕，后者需要动用占地一个足球场，开动起来耗电25兆瓦，也就是需要一个火电厂单独为其供电，成本高达几亿美元的全球最大超级计算机比如中国国防科技大学的“天河二号”全力计算几个月才能算出来结果；
* 通常我们做工程设计时，有一个安全系数，比如一个零件，设计承受一千公斤压力不会有问题，实际上可能需要真正施加一千五百公斤，乃至两千公斤的压力才能使其损坏，这就看设计的安全系数是1.5还是2.0了。现实中的有形实体，由于成本的缘故，安全系数一般也就是个位数；
* 但是密码算法这种东西，天然的就可以做到**安全系数是一个天文数字**，一般都是需要全球最大超级计算机计算几亿年，几十亿年乃至于几万亿年，比宇宙的年龄还长的时间才可能破解,最低标准一般都是需要几百万年的计算时间；  
所以，对于密码学术界来说，一种算法的理论攻击成果，能达到计算量“只需”全球最大超级计算机计算几年，或者几个月的时候，等于一些大国的国家级力量，可能已经能在更短时间内破解这种算法了，这种算法就被视为“被攻破”了；  
但这种“被攻破”，距离对普通人产生实质性危害，还有很远的距离，原因在上面已经说过了，因为现实中用到密码算法的比如金融等等重要领域，都是一个复杂的环环相扣的整体，由于其他环节的相互作用，单一的HASH算法环节“被攻破”能对整体业务产生威胁的可能性极小，因为此类重要领域的应用系统设计之初就会考虑某个环节“被攻破”的话，如何用其他环节相互制约把危害降到最低；
* 所以说，MD5的这种“被理论破解”，还**不足以产生实际的危害**，只是提醒类似金融系统等各类依赖于密码算法的重要系统，该开始逐步迁移到一种新的更安全的算法或者技术上了；




1. ###SHA-2的硬件加速支持：###
	2. [Oracle Spack T4 处理器(2011年)](http://www.csdn.net/article/2011-08-29/303718)  
* 近日在斯坦福大学召开的"Hot Chips 23"大会上Intel、IBM、AMD等没拿出来什么新的猛料，对比之下ARM和Oracle透露下一代处理器的相关技术细节更多。其中Oracle接手Sun后开发的SPARC架构处理器依旧面向服务器和HPC（超级计算机）领域，而目前世界排名第一的日本RIKEN（理化学研究所）和富士通合力打造的超级计算机“京”就是采用SPARC架构V8fx CPU。接下来我们就一起来看看Oracle下一代服务器/HPC用处理器SPARC T4的具体面貌。  
* 这款开发中的次世代SPARC处理器T4开发代号名为"Yosemite Falls"。作为Oracle收购Sun System后推出的首款SPARC处理器T3的后续产品，T4的主要改进部分在单线程和*加密运算*性能上。
* 同时，Oracle此次宣讲中着重强调的一点就是T4集成对应模块，大大强化了加密编码运算处理的性能。主要得益于增加了专门对应AES和DES、Kasumi、Camellia、CRC32c等算法的低延迟"in-pipe"命令，以及**对应MD5、SHA-1、SHA-256、SHA-512、MPMUL等算法**的高延迟"out-of-pipe"命令。
 