2018-04-08 16:09
很多人会在选择一个cms做建站前会问起joomla和wordpress、drupal选择哪个更好？实际上这个问题并不复杂，但是很多人很难直观理解这几个系统区别所在。就用交通工具来举个例子也许大家会明白，Wordpress是电动自行车——上手容易，起步简单。Joomla是成品汽车——你要驾驭它前期也许会让你觉得还要考取驾照，是个比较麻烦的事情。但后期开起车来自然也就舒适平稳很多。Drupal是配件工厂——更适合组装成个性的东西，你需要什么样的车凭自己能力自己组装构建吧，哪怕你要组装一辆坦克开着高兴就好。所以，选择哪个cms来构建网站，完全要看自己的实际需求。如果你去附近菜市场买菜，当然是骑电动车比开车要好很多....
WordPress / Joomla / Drupal 是真正开源产品，遵循开源协议，不搞什么加密授权（比如shopEX搞的zend老版本，到php 5.3的主机上就挂掉了）！使用后没有任何法律纠纷，有专业的开发文档，专业的开发团队！
缺点就是中文资料少，中文扩展少，中文模板少！ 主要是模板！！！模板制作需要一定php基础，门槛相较国产CMS就不低了，网上盗版的英文商业模板换成中文之后效果欠佳！Joomla!更适合用作新闻发布、企业网站、外贸多语言网站、个人博客等领域。
做为资深使用者和开发商，我觉得这两个东西不是谁好的问题，而是他们本来就不是一种东西。对，他们都是CMS，但他们的应用方向是不同的：
Joomla更适合找一个商业扩展，然后微调一下就开始使用，实际上Joomla的扩展多数都直接解决了一个商业／应用方面的问题，如sh404sef是一个SEO扩展，jomsocial是一个社区扩展，RSfirewall是一个防火墙。
Drupal的扩展根本不是这样，如果说Joomla的扩展是一个家电，那drupal的扩展都是配件，等你自己组合成你要的家电，所以你要做一个jomsocial这样功能的东西，drupal可能需要几百个组件，但这不是说drupal不好，而是说，它可以按照你自己的思路来构建。
所以到底用Joomla还是Drupal要自己根据自己的实际情况来确定。

2018-04-09 13:39 Docker部署gogs要点（链接：UzYTdiMzU1ZTMzNz）：
数据卷：容器内/data的数据保存在宿主机的/var/gogs目录
映射并暴露ssh端口；
版本库默认路径：保留默认值；
运行用户：保留默认值；
域：填写宿主机域名或者IP；
SSH端口：使用容器映射到宿主机上的端口例如8122；
SSH服务器：不要使用容器内置服务器；
HTTP端口：使用容器内部gogs监听的端口，最好用默认值3000；
应用URL：使用组合的域和外部HTTP端口；

2018-04-09 14:11
不同主机使用同一私钥进行登陆。
Host github.com git.coding.net
    HostName %h
    Port 22
    User git
    IdentityFile  ~/.ssh/id_rsa_blog
    IdentitiesOnly yes
测试：
$ ssh -T git@git.coding.net
$ ssh -T git@github.com

2018-04-26 20:17
有个人的atom经常崩溃，崩溃报告的第三行是如下，然后回复说把github插件在package里面禁用就行了。那我试试看吧，也禁用github插件看看。如果不行，下次也知道估计是哪个组件造成问题了。
Identifier:            com.github.atom.helper


2018-04-27 11:06 atom的崩溃问题很多人近期也遇到了，都是如下的异常：
然后有人说打开Safe Modle,以及关闭自动更新，还有去掉http_proxy之类的代理服务器设置等就能好，作为暂时应急措施，长久的就等更新修复这个bug了。我之前用了很久的1.18版本一直挺稳定的。我试试看1月初的1.23.3版本看看，估计也还算稳定，我遇到的就是从1.25版本开始不稳定的；
Exception Type:        EXC_BAD_INSTRUCTION (SIGILL)
Exception Codes:       0x0000000000000001, 0x0000000000000000
好些人说是当VPN连接切换时崩溃的，此时apm无法访问自动更新服务器就崩溃了；
所以我估计1.24.1是最后一个稳定版本；
但是据说最新版本比如1.26.1开始有一个临时修补措施，关闭自动更新就可以暂时避开这个问题；



2018-05-10 10:27 JSON和Protobuf相比，双精度浮点数编解码速度有数量级差距，大量整数数组的编码速度和大小方面有数量级差距；所以：
JSON适合的应用场景：数据以字符串为主，数据量不是很大，对传输带宽不是很敏感（例如移动网络），对外提供广泛而数据量不大的Service接口的场合；
Protobuf适合的应用场景：数据以整数，浮点数为主，数据量很大因而有必要节约传输带宽提高性能，仅仅用于内部系统之间交互，或者只对外提供少量服务器之间数据交互但是有必要节约传输带宽的场合；
绝大部分应用系统都还没有到需要考虑传输性能的地步，特别是外部REST API接口；外部API接口真有某些个别巨大数据量的场合的时候可以考虑使用JSON格式的接口发送pb格式的“批量操作API”的各种元数据，然后再通过这个少量的PB接口获取大批量数据；
也就是说，对外API接口平时以容易理解的JSON接口为主，个别特例用PB接口；

2018-05-11 09:44 我找到新的定时提醒的方式了，几行Python程序，使用time和webbrowser模块，定时用webbrowser模块调用浏览器打开指定网页即可达到提醒自己的效果；python程序自身用nohup mynotify.py &的方式在后台运行，即便关掉终端窗口也还是在后台运行，就可以不在任务栏显示烦人的图标了；而使用一个持续运行的Python程序，则提醒时间等等都可以自己随心定制，比crontab灵活多了；也可以用atmo打开某个文本文件作为提示；

2018-06-10 11:18 常用docker镜像
django
microsoft/dotnet *
memcached
mysql
golang *
erlang
rust *
swift
r-base
haskell *
thrift
pypy
iojs
wordpress
logstash
influxdb
rethinkdb
zookeeper

opensuse
fedora
debian


redmine
joomla
jenkins
drupal

java
openjdk
maven
jetty
elasticsearch
kibana
haproxy

2018-06-25 16:54 数据长期保存50年以上乃至于更久的方法：
磁带机，这个有标准协议，向下兼容；（尽管如此，为了保险，每隔5年重新Copy比较好）
二维码，然后刻录在金属板子上或者打印在纸上，容量还凑合。（你可以试试用paperbak这个软件，一张A4能存500KB数据，用激光打印机打印完塑封保存100年都没问题。http://ollydbg.de/Paperbak/）
任何电子手段的数据，每隔3-5年就用当时新的方式翻录，才能保持读取兼容性；

2018-07-05 16:08
wget https://raw.githubusercontent.com/chiakge/Linux-Server-Bench-Test/master/linuxtest.sh -N --no-check-certificate
然后bash 执行。可以简单测试网络和系统；主要适合于Linux；
alias mtr='sudo /usr/local/Cellar/mtr/0.92/sbin/mtr '

2018-07-06 11:01 签名使用以下命令：
gpg --default-key zhouwei6160@gmail.com --clear-sign
gpg -a --export zhouwei6160@gmail.com 这是导出公钥的命令。
alias qmt='gpg --default-key zhouwei6160@gmail.com -sa'
alias qmf='gpg --default-key zhouwei6160@gmail.com -ba'


2018-07-09 16:16 linux cpu benchmark，原理是利用系统自带计算器bc计算反正切5000位：
time echo "scale=5000; a(1)*4" | bc -l
RMBP：22.8s(2.7G i5,2015早期款式)
阿里云web3:21.8s
树莓派2:2分36.6秒=156.6s

2018-07-12 11:13
本文以Linux实例和fio为例，说明如何使用fio测试块存储性能。在进行测试前，请确保块存储已经4 KiB对齐。
警告：测试裸盘可以获得真实的块存储盘性能，但直接测试裸盘会破坏文件系统结构，请在测试前提前做好数据备份。建议您只在新购无数据的ECS实例上使用工具测试块存储性能，避免造成数据丢失。
测试随机写IOPS，运行以下命令：
fio -direct=1 -iodepth=128 -rw=randwrite -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Write_Testing
测试随机读IOPS，运行以下命令：
fio -direct=1 -iodepth=128 -rw=randread -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Read_Testing
测试顺序写吞吐量，运行以下命令：
fio -direct=1 -iodepth=64 -rw=write -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Write_PPS_Testing
测试顺序读吞吐量，运行以下命令：
fio -direct=1 -iodepth=64 -rw=read -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Read_PPS_Testing

2018-07-19 13:15 安装kibana，可视化分析迁移ES集群：
https://www.cnblogs.com/wxw16/p/6150681.html
wget -c https://artifacts.elastic.co/downloads/kibana/kibana-5.5.2-linux-x86_64.tar.gz
解压缩，进入目录：
然后到kibana安装目录的config下，编辑kibana.yml配置文件，添加如下配置：
#配置本机ip
server.host: "192.168.252.129"
#配置es集群url
elasticsearch.url: "http://192.168.252.129:9200"
基本配置这两项就可以见到效果了，高级设置现在不用管。
切换到kibana安装目录的bin目录下，执行kibana文件
cd /run/kibana-5.5.2-linux-x86_64/bin
./kibana &
成功启动后，可以访问：http:// 192.168.252.129:5061 来访问kibana，ip为kibana安装节点ip，端口默认为5061，可以在config/kibana中配置
不过运行之后并未显示数据分布情况，还是直接用命令行吧。

2018-07-19 17:14 取得现有项目所用的es 5.5.x版本的官方网站命令如下：但是由于gfw缘故，使用翻墙通道比较好；
docker pull docker.elastic.co/elasticsearch/elasticsearch:5.5.3
翻墙通道pull es 5.5.3镜像：
sudo HTTP_PROXY=http://localhost:1429/ docker pull docker.elastic.co/elasticsearch/elasticsearch:5.5.3
重新打一个简称的标签方便使用：
docker tag docker.elastic.co/elasticsearch/elasticsearch:5.5.3 es5
docker inspect es5查看镜像信息：
开放了9200，9300端口，日期是20170911，基于centos，docker版本17.06.0-ce，jre-1.8.0-openjdk。

2018-07-20 09:27 无需root权限执行docker命令方法：
usermod -G docker zw
service docker restart
chmod a+rw /var/run/docker.sock
这三条命令即可，也就是把用户加入docker组，然后重启docker daemon服务，然后修改docker.sock文件权限。
