2013/11/12 10:07:15 iOS 开发和 Android  开发，哪个更有前景？
Rex Law ，现从事从事iOS、Android、Webkit 等移动设…
收起
王晓寅 赞同
其实在不久之后移动设备端的开发（除企业级应用）都会沦落成现在的网页一样，都是没什么利润的体力活。
android比较好的方向应该是针对特定需求的，完整的固件定制，或者完整的终端软硬件一体化定制，这块在企业，或者细分市场应该非常看好，单纯的做APP很难有活路，但是这个方向相对要求比较高。

刘珂宇 ，it 互联网行业猎头 闷骚的胖纸 摩羯座
收起
我就目前我寻访的职位来看，ios和android工程师需求量一样多，薪资ios微高，长远来看各有所长，但是求职的方向要看好，不要去外包公司，虽然学的可能更多，但是对以后职场之路不是很有利。

耿直干将 ，不爱加班的加班IT 男 电子产品 电影 美剧
收起
Android应该相对来说更好一点，ios只是面对苹果的产品，封闭性高，开发人员需要先交给苹果100美刀的注册费，而Android对应使用java语言，路更宽。
培训的话建议去verycd现在培训视频看，不建议去培训班。
实际上直接去一家对应技术的IT公司，熬过第一个项目比去培训更有意义。但是怎么能进去可能就看运气和人脉了。
很多去培训的人可能也是为了培训结束后安排就业，但是就业单位可能就是外包或者不好的单位。
所以搞技术的话，最好能找到一个资深的人深入探讨。

deep-pro  ，心向菩提,不喜请勿关注。

收起
魏勤 赞同
嵌入式干不过互联网。
嵌入式最终是卖硬件。
互联网，只要有流量就能“骗”到钱，就能上市。烧钱挣钱都很容易。
嵌入式更像传统行业，需要强大的资本做后盾。互联网，有个几百万都有可能掀起一波浪潮。
工资跟老板的盈利能力最相关，哪怕是烧钱。

这也和有钱没处投资的天使的急躁有关。互联网项目投入百万级别（也就一套房），最多1年就能基本看出来是否有前途。嵌入式项目，很可能百万连调试设备都买不齐。所以嵌入式创业难，找投资难。

再补充一个，2012年科技公司员工人均价值榜：
http://www.cnbeta.com/articles/219250.htm 
互联网高出嵌入式设备厂商几倍的人均利润啊

****************************************************************************************************
2013/11/19 17:29:53  第46周 [星期二] 
[云计算时代，我与Go 语言难解的缘分](http://www.programmer.com.cn/13730/)
文/许式伟
我在新浪微博 、《Go语言编程》一书中下了一个论断：Go语言将超过C、Java，成为未来十年最流行的语言。
我曾在2007年第2届ECUG大会上提到了我对未来软件产业趋势的判断：存储与计算将向服务端转移；PC单机转换为强悍的服务器＋多元化的终端。这个趋势判断对我的职业生涯其实影响非常重大。
从技术角度来讲，它促使我放弃了近10年的桌面开发经验，转向服务端开发。正如我在《我为什么选择了Erlang》中建议的那样：
* 要么不写程序，要么就写服务器端程序；
* 当然，你也可以去撰写移动终端设备上的代码，在***PC平台上做开发的空间很小***。
在《Go语言编程》一书的前言中，我谈到Go语言的基础哲学来源于C语言，而不是像Java、C#那样，学的是C++。C语言的成功在于它足够简单，所以Go语言也要非常简单。Go语言的定位就是成为互联网时代的C语言。本质上来说，Go语言的特性都围绕着以下设计哲学：
大道至简，显式表达。任何封装都是有漏洞的。最佳的表达方式就是最直白的表达方式，不试图去做任何包装。
最少特性原则。如果一个功能不对解决任何问题有显著价值，那么就不提供。
尽管是40年来出现的语言非常之多，但我认为，谈得上突破了C语言思想，将编程理念提高到一个新高度的，仅有Go语言而已。
Go语言是一门变革性的语言，要革的是C的命（顺便革Java的命）。Go语言很简单，但具备极强的表现力。从目前的状态来说，Go语言主要关注服务器领域的开发，但这不是Go语言的完整使命。
我们说Go语言适合服务端开发，仅是因为它的标准库支持方面，目前是向服务端开发倾斜：
网络库（包括 Socket、HTTP、RPC 等）；
编码库（包括 JSON、XML、GOB等）；
加密库（各种加密算法、摘要算法）；
Web（包括 Template、HTML支持）。
而作为桌面开发的常规组件GDI和UI系统与事件处理，基本没有涉及。

总之，我认为，Go语言将引领未来10年IT产业的发展。在最初5年内，Go语言会在服务器端编程上大放异彩，而桌面端的开发则仍然处于探索和完善期，预计在后5年才趋于成熟，成为各种手持设备上的主流开发语言之一。

作者许式伟，七牛云存储CEO，曾任盛大创新院资深研究员、金山软件技术总监、WPS Office 2005首席架构师。开源爱好者，发布过包括WINX、TPL等十余个C++开源项目，拥有超过15年的C/C++开发经验。在接触Go语言后即可被其大道至简、少即是多的设计哲学所倾倒。七牛云存储是国内第一个吃螃蟹的团队，核心服务完全采用Go语言实现。

****************************************************************************************************
代码行数和大型项目有什么关系？我认为python不太适合大型互联网应用，当然首先说豆瓣是一个特列，他们有太多的牛人，说真的，把这群牛人聚集起来用什么语言开发都行，只要他们愿意。
原因有几点：
1. python没有多线程，无法利用多核，也更别提强大的多线程包了。我之前想通过python脚本来测试一个java RPC框架的最大并发能力，却没有办法，因为单个python脚本根本无法压榨机器。而java得益于大神DougLea开发concureent包，提供了各种多线程开发中需要使用各种利器：Executor，Atomic，Lock, BlockingQueue等。
2. python没有一个强大，高性能的web应用服务器。gunicorn和uwsgi已经算python最好的web应用服务器了，但性能真的差强人意。
3. python缺乏一系列诊断工具。jvm提供的jstack,jstat,btrace真是太强大了，而python...提一个基本需求吧：谁知道如何实时dump线上运行的python thread stack？
4. python没有一款合适的web开源框架。web.py太简单，基本等于从零开始开发，表单验证，middleware,csrf啥都没有，只有一个url mapping。而django的性能太差，又给你一堆没用的东西。
5. 有人会反驳说python没有多线程，但有纤程（协程）啊！是的，但python如果要使用gevent，有太多的坑要踩。你除了自己的代码需要考虑纤程，还要考虑mysql,mongoDB,redis,memcached等客户端。
6. python大部分开源库的connection没有pool，或者是这些conection pool不能很好的和gevent一起工作，这在大型互联网开发中是很恐怖的。原因是，很多conection pool是通过threadlocal实现的(参考python memcached的源代码（https://pypi.python.org/pypi/python-memcached/ ）)，而纤程的threadlocal实现有点奇葩。

python是一门好语言，但个人觉得python更适合在自然语言处理，机器学习，火星车开发，探月工程等单机系统。不适合需要支撑大流量访问，业务快速发展，团队成员都是屌丝开发，没有豆瓣大神的互联网应用。

注：前面的观点只针对Cython,如果你选择Jython，一切都不是问题了，哈哈！
不要闹，看这里 (⊙o⊙) --> http://en.wikipedia.org/wiki/List_of_Python_software#Commercial_uses
当然，不得不承认，纯用Python不是一个好主意。胶水语言就应该起到胶水的作用。建立结构清晰，易于控制的框架。内部结合别的语言实现（不得不说，Python和别的语言结合很棒。。当然，我只知道C的情况）。

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************